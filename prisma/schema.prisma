// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User  {
id String @id @default(cuid())
name String 
email String 
avatar String?
about String?

courses Course[]
subscribedCourses Course[] @relation("subscription")
learns Learn[]
qnas Qna[] 
notes Note[] 
replies Reply[]

updatedAt DateTime?
createdAt DateTime @default(now())
}

model Course {
  id String @id @default(cuid())
  title String 
  description String?
  imageUrl String? 
  price Int? 
  free Boolean @default(false)
  discount Int?
  discountType String?
  
  language String[] @default(["english"])
  category String[]
  duration Int?
  level Int? @default(5)
  
  toLearn String[]
  rerequisites String[]

  creator User @relation(fields: [creatorId],references: [id])
  creatorId String

  students User[] @relation("subscription")
  modules Module[]
  learns Learn[]
  qnas Qna[] 
  notes Note[] 
  ratings Rating[]


  updatedAt DateTime?
  createdAt DateTime @default(now())

}

model Rating {
  id String @id @default(cuid())
  text String
  value Int

  course Course @relation(references: [id],fields: [courseId])
  courseId String
}

model Learn {
  
  userId String 
  courseId String 
  done Boolean @default(false)
  lastLesson String? 
  doneLesson String[]
  currentLessonId String?

  user User @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  updatedAt DateTime?
  createdAt DateTime @default(now())

  @@id([userId,courseId])
}

model Module {
  id String @id @default(cuid())
  title String 
  duration String? 

  course Course @relation(fields: [courseId], references: [id],onDelete: Cascade)
  courseId String

  lessons Lesson[]

  updatedAt DateTime?
  createdAt DateTime @default(now())
}

model Lesson {
  id String @id @default(cuid())
  title String 
  index Int @default(autoincrement())
  description String?
  videoUrl String? 
  preview Boolean @default(false)

  module Module @relation(fields: [moduleId],references: [id],onDelete: Cascade)
  moduleId String 

  qnas Qna[]
  lessons Note[]

  updatedAt DateTime?
  createdAt DateTime @default(now())
}


model Qna {
  id String @id @default(cuid())
  text String 
  replies Reply[]
  
  user User @relation(references: [id],fields: [userId])
  userId String 
  
  lesson Lesson @relation(references: [id],fields: [lessonId])
  lessonId String 

  course Course @relation(references: [id],fields: [courseId])
  courseId String

  updatedAt DateTime?
  createdAt DateTime @default(now())
}

model Reply{
  id String @id @default(cuid())
  text String 
  qna Qna @relation(fields: [qnaId],references: [id])
  qnaId String

  user User @relation(references: [id],fields: [userId])
  userId String

  updatedAt DateTime?
  createdAt DateTime @default(now())
}

model Note {
  id String @id @default(cuid())
  text String 
 
  user User @relation(references: [id],fields: [userId])
  userId String 
  
  lesson Lesson @relation(references: [id],fields: [lessonId])
  lessonId String 

  course Course @relation(references: [id],fields: [courseId])
  courseId String

  updatedAt DateTime?
  createdAt DateTime @default(now())
}
